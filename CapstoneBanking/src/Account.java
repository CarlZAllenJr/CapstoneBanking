import javax.swing.*;
import java.awt.*;
import java.sql.*;
import java.util.Random;

public class Account extends javax.swing.JFrame {
    private JLabel[] labels = new JLabel[10];
    private JTextField[] textFields = new JTextField[10];
    private JButton[] buttons = new JButton[3];
    private String[] buttonLabels = { "Create", "Go Back", "Clear"};
    private JLabel lblLogo;
    private int userIDCounter = 1; // Initialize the counter
    private JLabel lblAccountType;

    private JComboBox<String> comboBox;

    public Account() {
        setTitle("Capstone Banking Solutions: Account Creation");
        initUI();
        addComponents();
        addActions();
        assignRandom();
        // Fetch and display auto-generated user ID and account number
        fetchAutoGeneratedValues();

        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setSize(900, 600);
        setResizable(true);
        setLocationRelativeTo(null);
        setVisible(true);
    }

    private void initUI() {
        lblLogo = new JLabel(new ImageIcon(new ImageIcon("C:\\Users\\merci\\Downloads\\Capstone Banking.png")
                .getImage().getScaledInstance(200, 200, Image.SCALE_SMOOTH)));
        getContentPane().setBackground(Color.decode("#28282B"));

        String[] labelNames = {
                "UserID Assigned:", "Account Number:", "Pin Number:",
                "First Name:", "Last Name:", "Username:",
                "Password:", "Phone Number:", "Email:", "Starting Balance:"
        };

        String[] accountType = {"Select", "Checking", "Savings", "Both"};
        comboBox = new JComboBox<>(accountType);

        // Font for regular labels
        Font labelFont = new Font("Lexend", Font.PLAIN, 16);

        // Adding account type label (kept separate due to combo box)
        lblAccountType = new JLabel();
        lblAccountType.setFont(labelFont);
        lblAccountType.setForeground(Color.WHITE);

        for (int i = 0; i < labels.length; i++) {
            labels[i] = new JLabel(labelNames[i]);
            labels[i].setFont(labelFont);
            labels[i].setForeground(Color.WHITE);
            textFields[i] = new JTextField(20);

            if (i == 0) { // If it's the user_input field
                textFields[i].setEditable(false); // Make it non-editable
                textFields[i].setBackground(Color.LIGHT_GRAY);
            }
        }
    }

    private void addComponents() {
        // Layout set to null for manual positioning
        setLayout(null);

        // Add logo to top left of form
        lblLogo.setBounds(50, 0, 200, 200);
        add(lblLogo);

        // Font for header label
        Font headerFont = new Font("Lexend", Font.BOLD, 50);

        // Add header text to form
        JLabel lblAccountCreation = new JLabel("Account Creation");
        lblAccountCreation.setFont(headerFont);
        lblAccountCreation.setForeground(Color.WHITE);
        lblAccountCreation.setBounds(300, -100, 500, 400);
        add(lblAccountCreation);

        // Declare offset variables for loop and separation if-statement
        int yOffset = 200;
        int labelX = 50;
        int textFieldX = 200;

        for (int i = 0; i < labels.length; i++) {
            labels[i].setBounds(labelX, yOffset, 140, 30);
            textFields[i].setBounds(textFieldX, yOffset, 200, 30);
            labels[i].setHorizontalAlignment(SwingConstants.RIGHT); // Align label text to the right
            add(labels[i]);
            add(textFields[i]);
            yOffset += 50;

            if(i == labels.length / 2 - 1){
                labelX += 400;
                textFieldX += 400;
                yOffset = 200;
            }

            lblAccountType.setText("Account Type: ");
            lblAccountType.setBounds(labelX, yOffset, 140, 30);
            lblAccountType.setHorizontalAlignment(SwingConstants.RIGHT);
            add(lblAccountType);
            comboBox.setBounds(textFieldX, yOffset, 200, 30);
            add(comboBox);

        }
        //add buttons
        for (int i = 0; i < buttons.length; i++) {
            buttons[i] = new JButton(buttonLabels[i]);
            buttons[i].setBounds(300 + (i * 120), 500, 100,30);
            add(buttons[i]);
        }
    }

    private void addActions() {
        buttons[0].addActionListener(e -> {
            // Create button clicked
            sqlInput();
        });

        buttons[1].addActionListener(e -> {
            // Go Back button clicked
            setVisible(false);
            Authentication authentication = new Authentication();
            authentication.setVisible(true);
        });

        buttons[2].addActionListener(e -> {
            // Clear button clicked
            for (int i = 1; i < textFields.length; i++) {
                if (i < 1 || i > 2) {
                    textFields[i].setText(""); // Clear text fields that are not randomly generated
                }
            }
        });
    }

    private void assignRandom(){
        Random random = new Random();
        // Generate a random 4-digit PIN
        int pinValue = 1000 + random.nextInt(9000);
        String pinValueString = String.valueOf(pinValue);

        // Set the PIN field
        textFields[2].setText(pinValueString);

        // Make the PIN field non-editable and change its background
        textFields[2].setEditable(false);
        textFields[2].setBackground(Color.LIGHT_GRAY);
    }


    private void sqlInput() {
        try {
            String url = "jdbc:mysql://localhost:3306/capstone_banking";
            String username = "root";
            String password = "NarutoUzumaki25!";

            Connection connection = DriverManager.getConnection(url, username, password);
            String accountType = (String) comboBox.getSelectedItem(); // Get the selected account type

            String userSql = "INSERT INTO users (pin_number, first_name, last_name," +
                    " username, password, phone_number, email, balance, account_type_1) " +
                    "VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)";

            String accountSql = "INSERT INTO accounts (user_id, account_type_1, balance) VALUES (?, ?, ?)";

            PreparedStatement userStatement = connection.prepareStatement(userSql, PreparedStatement.RETURN_GENERATED_KEYS);
            PreparedStatement accountStatement = connection.prepareStatement(accountSql);

            userStatement.setString(1, textFields[2].getText());
            userStatement.setString(2, textFields[3].getText());
            userStatement.setString(3, textFields[4].getText());
            userStatement.setString(4, textFields[5].getText());
            userStatement.setString(5, textFields[6].getText());
            userStatement.setString(6, textFields[7].getText());
            userStatement.setString(7, textFields[8].getText());
            userStatement.setString(8, textFields[9].getText());
            userStatement.setString(9, accountType);

            int rowsInserted = userStatement.executeUpdate();
            if (rowsInserted > 0) {
                System.out.println("A new user was inserted successfully!");

                ResultSet generatedKeys = userStatement.getGeneratedKeys();
                int generatedUserId = -1;
                if (generatedKeys.next()) {
                    generatedUserId = generatedKeys.getInt(1);
                    textFields[0].setText(String.valueOf(generatedUserId));
                }

                // Insert account entry with the generated user_id
                accountStatement.setInt(1, generatedUserId);
                accountStatement.setString(2, accountType);
                accountStatement.setString(3, textFields[9].getText());
                accountStatement.executeUpdate();
            }

            connection.close();
        } catch (SQLIntegrityConstraintViolationException ex) {
            // Handle duplicate entry
            String errorMessage = "This ";
            if (ex.getMessage().contains("username")) {
                errorMessage += "username is taken, please provide a new username.";
            } else if (ex.getMessage().contains("email")) {
                errorMessage += "email is taken, please provide a new email.";
            }
            JOptionPane.showMessageDialog(this, errorMessage, "Error", JOptionPane.ERROR_MESSAGE);
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }


    private void fetchAutoGeneratedValues() {
        try {
            String url = "jdbc:mysql://localhost:3306/capstone_banking";
            String username = "root";
            String password = "NarutoUzumaki25!";

            Connection connection = DriverManager.getConnection(url, username, password);

            // Fetch the last inserted row from users and accounts tables
            String fetchSQL = "SELECT u.user_id, a.account_number " +
                    "FROM users u " +
                    "JOIN accounts a ON u.user_id = a.user_id " +
                    "ORDER BY u.user_id DESC LIMIT 1";

            PreparedStatement fetchStatement = connection.prepareStatement(fetchSQL);
            ResultSet resultSet = fetchStatement.executeQuery();

            if (resultSet.next()) {
                int userID = resultSet.getInt("user_id") + 1;
                int accountNumber = resultSet.getInt("account_number") + 1;

                // Set the fetched values plus 1 in the corresponding text fields
                textFields[0].setText(String.valueOf(userID));
                textFields[1].setText(String.valueOf(accountNumber));
                textFields[1].setEditable(false);
                textFields[1].setBackground(Color.LIGHT_GRAY);
            }

            connection.close();
        } catch (SQLException ex) {
            ex.printStackTrace();
        }
    }

    public static void main(String[] args) {
        new Account();
    }
}
